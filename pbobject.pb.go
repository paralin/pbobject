// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/pbobject/pbobject.proto

/*
Package pbobject is a generated protocol buffer package.

It is generated from these files:
	github.com/aperturerobotics/pbobject/pbobject.proto

It has these top-level messages:
	ObjectWrapper
	ObjectTypeID
*/
package pbobject

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/aperturerobotics/timestamp"
import objectenc "github.com/aperturerobotics/objectenc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ObjectWrapper wraps and stores an object.
type ObjectWrapper struct {
	// ObjectTypeCrc is the crc32 of the object type ID.
	ObjectTypeCrc uint32 `protobuf:"varint,1,opt,name=object_type_crc,json=objectTypeCrc" json:"object_type_crc,omitempty"`
	// Timestamp is the time this object was wrapped.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// EncBlob is the inner data of the object.
	EncBlob *objectenc.EncryptedBlob `protobuf:"bytes,3,opt,name=enc_blob,json=encBlob" json:"enc_blob,omitempty"`
}

func (m *ObjectWrapper) Reset()                    { *m = ObjectWrapper{} }
func (m *ObjectWrapper) String() string            { return proto.CompactTextString(m) }
func (*ObjectWrapper) ProtoMessage()               {}
func (*ObjectWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ObjectWrapper) GetObjectTypeCrc() uint32 {
	if m != nil {
		return m.ObjectTypeCrc
	}
	return 0
}

func (m *ObjectWrapper) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *ObjectWrapper) GetEncBlob() *objectenc.EncryptedBlob {
	if m != nil {
		return m.EncBlob
	}
	return nil
}

// ObjectTypeID is an identifier for a type, hashed to get the object type crc.
type ObjectTypeID struct {
	// TypeUuid is the type unique identifier.
	TypeUuid string `protobuf:"bytes,1,opt,name=type_uuid,json=typeUuid" json:"type_uuid,omitempty"`
}

func (m *ObjectTypeID) Reset()                    { *m = ObjectTypeID{} }
func (m *ObjectTypeID) String() string            { return proto.CompactTextString(m) }
func (*ObjectTypeID) ProtoMessage()               {}
func (*ObjectTypeID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ObjectTypeID) GetTypeUuid() string {
	if m != nil {
		return m.TypeUuid
	}
	return ""
}

func init() {
	proto.RegisterType((*ObjectWrapper)(nil), "pbobject.ObjectWrapper")
	proto.RegisterType((*ObjectTypeID)(nil), "pbobject.ObjectTypeID")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/pbobject/pbobject.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x8f, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x89, 0x82, 0x26, 0xab, 0x41, 0x58, 0x3c, 0x04, 0xbd, 0x94, 0x1e, 0xa4, 0x20, 0xa4,
	0xd0, 0xe0, 0x0b, 0xf8, 0xe7, 0xe0, 0xa9, 0x10, 0x2a, 0x1e, 0x43, 0x76, 0x32, 0xe8, 0x4a, 0x93,
	0x5d, 0xa6, 0xb3, 0x87, 0xbc, 0x8d, 0x8f, 0x5a, 0xba, 0x4b, 0xb3, 0xb7, 0xdc, 0x7e, 0xfb, 0x31,
	0xdf, 0xec, 0x6f, 0x44, 0xf5, 0xa3, 0xf9, 0xd7, 0xa9, 0x12, 0x4c, 0xbf, 0x6e, 0x2d, 0x12, 0x3b,
	0x42, 0x32, 0xca, 0xb0, 0x86, 0xc3, 0xda, 0x2a, 0xa3, 0xfe, 0x10, 0x78, 0x82, 0xd2, 0x92, 0x61,
	0x23, 0xd3, 0xf3, 0xfb, 0xe1, 0x65, 0xae, 0xce, 0xba, 0xc7, 0x03, 0xb7, 0xbd, 0x8d, 0x14, 0x16,
	0xcc, 0xd7, 0xc2, 0x6a, 0x1c, 0x20, 0x52, 0xa8, 0x2d, 0xff, 0x13, 0x91, 0x6f, 0x7d, 0xf6, 0x4d,
	0xad, 0xb5, 0x48, 0xf2, 0x49, 0xdc, 0x85, 0xa1, 0x86, 0x47, 0x8b, 0x0d, 0x10, 0x14, 0xc9, 0x22,
	0x59, 0xe5, 0x75, 0x1e, 0xe2, 0xdd, 0x68, 0xf1, 0x8d, 0x40, 0x6e, 0x44, 0x36, 0x39, 0x14, 0x17,
	0x8b, 0x64, 0x75, 0xb3, 0xb9, 0x2f, 0xa3, 0xd5, 0xee, 0x4c, 0x75, 0x1c, 0x93, 0x95, 0x48, 0x71,
	0x80, 0x46, 0xed, 0x8d, 0x2a, 0x2e, 0x7d, 0xa5, 0x28, 0xa3, 0xd1, 0xc7, 0x00, 0x34, 0x5a, 0xc6,
	0xee, 0x75, 0x6f, 0x54, 0x7d, 0x8d, 0x03, 0x9c, 0x60, 0xf9, 0x2c, 0x6e, 0xb7, 0xd3, 0xcf, 0x9f,
	0xef, 0xf2, 0x51, 0x64, 0xde, 0xcc, 0x39, 0xdd, 0x79, 0xb5, 0xac, 0x4e, 0x4f, 0xc1, 0x97, 0xd3,
	0x9d, 0xba, 0xf2, 0x67, 0x55, 0xc7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x49, 0x15, 0x5f, 0x01, 0x85,
	0x01, 0x00, 0x00,
}
